package main

import (
	"context"
	"fmt"
	"log"

	"github.com/mkokoulin/LAN-coworking-bot/internal/config"
	"github.com/mkokoulin/LAN-coworking-bot/internal/helpers/encoder"
	"github.com/mkokoulin/LAN-coworking-bot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	ctx := context.Background()

	cfg, err := config.New()
	if err != nil {
		log.Fatalln(err)
		return
	}

	gc, err := services.NewGoogleClient(ctx, cfg.GoogleCloudConfig, cfg.Scope)
	if err != nil {
		log.Fatalf("fatal error %v", err)
	}

	coworkersSheets, err := services.NewCoworkersSheets(ctx, gc, cfg.CoworkersSpreadsheetId, cfg.CoworkersReadRange)
	if err != nil {
		log.Fatalf("fatal error %v", err)
	}

	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	currentCommand := ""
	isAwaitingConfirmation := false

	for update := range updates {
		if update.Message != nil {
			if update.Message.IsCommand() {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
				currentCommand = update.Message.Command()

				switch currentCommand {
					case "start":
						msg.Text = "start"
					case "wifi":
						msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–µ—Ç–∏: –≥–æ—Å—Ç–µ–≤–æ–π / –∫–æ–≤–æ—Ä–∫–∏–Ω–≥"
						msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
							tgbotapi.NewKeyboardButtonRow(
								tgbotapi.NewKeyboardButton("–≥–æ—Å—Ç–µ–≤–æ–π"),
								tgbotapi.NewKeyboardButton("–∫–æ–≤–æ—Ä–∫–∏–Ω–≥"),
							),
						)
					case "meetingrooom":
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
						msg.Text = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-mm-dd hh:mm - hh:mm"
					case "printout":
						msg.Text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç @lan_yerevan (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É) –∏ —É—Ç–æ—á–Ω–∏—Ç–µ —É –Ω–µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏"
					case "events":
						msg.ParseMode = "html"
						msg.Text = "–£ –Ω–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∞–Ω–æ–Ω—Å—ã —Å–æ–±—ã—Ç–∏–π –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö: <a href='https://www.instagram.com/lan_yerevan/'>Instagram</a> –∏ <a href='https://t.me/lan_yerevan'>Telegram</a>. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∫–ª–∞—Å—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π üéâ. –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–¥–µ—Ç—Å—è —á–µ—Ä–µ–∑ <a href='https://taplink.cc/lan_yerevan'>taplink</a>"
					case "about":
						msg.Text = "about"
					default:
						msg.Text = "I don't know that command"
				}
	
				if _, err := bot.Send(msg); err != nil {
					log.Print(err)
				}

				continue
			}

			if currentCommand == "meetingrooom" {
				if update.Message.Text == "" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
					msg.Text = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
					bot.Send(msg)

					continue
				}

				msgTo := tgbotapi.NewMessage(5701365900, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –ø—Ä–æ—Å–∏—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É - %s", update.Message.Chat.UserName, update.Message.Text))

				bot.Send(msgTo)
			}

			if currentCommand == "wifi" {
				if !isAwaitingConfirmation {
					if update.Message.Text == "–≥–æ—Å—Ç–µ–≤–æ–π" {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—Å–µ—Ç—å Lan_Guest –ø–∞—Ä–æ–ª—å lan123456")
						bot.Send(msg)
					}
	
					if update.Message.Text == "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥" {
						coworker, err := coworkersSheets.GetCoworker(ctx, fmt.Sprintf("@%s", update.Message.Chat.UserName))
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
							bot.Send(msg)
						}

						if coworker.Telegram != "" {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—Å–µ—Ç—å LAN –ø–∞—Ä–æ–ª—å @lan2023")
							bot.Send(msg)
							continue
						}
						
						isAwaitingConfirmation = true
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
						bot.Send(msg)
					}
				} else {
						unusedSecrets, err := coworkersSheets.GetUnusedSecrets(ctx)
						if err != nil {
							log.Fatalf("fatal error %v", err)
						}

						for _, s := range unusedSecrets {
							decoded, err := encoder.Decode(s)
							if err != nil {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
								bot.Send(msg)
							}

							if update.Message.Text == decoded {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—Å–µ—Ç—å LAN –ø–∞—Ä–æ–ª—å @lan2023")
								bot.Send(msg)

								newCoworker := services.Coworker{
									Secret: s,
									Telegram: fmt.Sprintf("@%s", update.Message.Chat.UserName),
								}
								err := coworkersSheets.UpdateCoworker(ctx, newCoworker)
								if err != nil {
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
									bot.Send(msg)
								}
								isAwaitingConfirmation = false

								continue
							}

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π, —É—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
						bot.Send(msg)
					}
				}
			}
		}
	}
}